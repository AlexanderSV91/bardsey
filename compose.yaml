services:
  config-server:
    image: config-server:3.4.5
    container_name: config-server
    build:
      context: ./config-server
      dockerfile: ./Dockerfile
    deploy:
      resources:
        limits:
          memory: 512M
    restart: no
    ports:
      - "8888:8888"
    volumes:
      - ../..:/workspaces:cached
    #      - ./docker/config-server/keystore:/workspace/keystore
    networks:
      - spring-cloud-network
    env_file:
      - docker.env
    environment:
      SPRING_PROFILES_ACTIVE: native
    #      ENCRYPT_KEYSTORE_LOCATION: /keystore/keystore.p12
    #      ENCRYPT_KEYSTORE_ALIAS: compose
    #      ENCRYPT_KEYSTORE_PASSWORD: w6egf6QA4hhjs7DHV_Py
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://config-server:8888/actuator/health || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
  discovery-server:
    image: discovery-server:3.4.5
    container_name: discovery-server
    build:
      context: ./discovery-server
      dockerfile: ./Dockerfile
    deploy:
      resources:
        limits:
          memory: 768M
    ports:
      - "8761:8761"
    volumes:
      - ../..:/workspaces:cached
    networks:
      - spring-cloud-network
    env_file:
      - docker.env
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://discovery-server:8761/actuator/health || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
  api-gateway:
    image: api-gateway:3.4.5
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    deploy:
      resources:
        limits:
          memory: 1024M
    ports:
      - "8080:8080"
    volumes:
      - ../..:/workspaces:cached
    networks:
      - spring-cloud-network
    env_file:
      - docker.env
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://api-gateway:8080/actuator/health || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
  url-shortener-service:
    image: url-shortener-service:3.4.5
    container_name: url-shortener-service
    build:
      context: ./url-shortener-service
      dockerfile: ./Dockerfile
    deploy:
      resources:
        limits:
          memory: 1024M
    ports:
      - "8081:8081"
    volumes:
      - ../..:/workspaces:cached
    networks:
      - spring-cloud-network
    env_file:
      - docker.env
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:17.5
    container_name: db-postgres
    restart: no
    ports:
      - "5432:5432"
    networks:
      - spring-cloud-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/initdb:/docker-entrypoint-initdb.d:ro
    env_file:
      - docker.env
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
  pgadmin:
    image: dpage/pgadmin4:8.14.0
    container_name: pgadmin
    restart: no
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
      - ./docker/pgadmin/pgpass:/pgadmin4/pgpass
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    entrypoint: /bin/sh -c "chmod 600 /pgadmin4/pgpass; /entrypoint.sh;"
networks:
  spring-cloud-network:
    driver: bridge
volumes:
  postgres-data:
  pgadmin_data:
